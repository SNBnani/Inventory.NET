using System;
using System.Data;
using System.Windows.Forms;
using CrystalDecisions.Shared;
using CrystalDecisions.CrystalReports.Engine;
using Biruni.Reports;
using Biruni.Shared;
using Biruni.Shared.Data;
using Biruni.Shared.Data.dsReportsTableAdapters;

namespace Biruni.Reports
{
    public static class ReportHelper1
    {

        public static string GenerateFooter()
        {
            string footer = "";
            footer += Application.ProductName;
            footer += " by " + Application.CompanyName + ", Pakistan (www.Biruniech.com)";
            footer += "\t\tReports generated by: ";
            footer += AppHelper.appUserName + " (" + AppHelper.appRoleName + ")";
            footer += " on " + DateTime.Today.ToString("hh:mm (tt) dd/MM/yyyy");
            return footer;
        }

        private static void RetrieveOwner(dsReports.OwnerDataTable dt)
        {
            OwnerTableAdapter ow = new OwnerTableAdapter();
            ow.ClearBeforeFill = true;
            ow.Connection = AppHelper.GetDbConnection();
            ow.FillOwner(dt);

        }

        private static void RetrieveDeveloper(dsReports.DeveloperDataTable dt)
        {
            dsReports.DeveloperRow row = dt.NewDeveloperRow();
            row.Code = "DEVELOPER";
            row.Type = "D";
            row.Active = true;
            row.Name = Application.CompanyName;
            row.Industry = Application.ProductName;
            row.Website = "http://www.Biruniech.com/";
            row.BillingContactPerson = AppHelper.appUserName;
            row.BillingContactPhone = AppHelper.appRoleName;
            dt.AddDeveloperRow(row);
        }

        private static void FillNoData(dsReports.DenormalizedOrdersDataTable dt)
        {
            dsReports.DenormalizedOrdersRow row = dt.NewDenormalizedOrdersRow();
            row.OrderNo = "NO DATA AVAILABLE";
            row.Remarks = "NO DATA AVAILABLE";
            row.CompanyName = "NO DATA AVAILABLE";
            row.DetailRemarks = "NO DATA AVAILABLE";
            row.OrderDate = DateTime.Today;
            dt.AddDenormalizedOrdersRow(row);
        }

        public static ReportDocument LoadDeliveryOrderForm(int id)
        {
            ReportDocument rpt = new Forms.rptDeliveryOrderForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadDeliveryOrderForm(string code)
        {
            ReportDocument rpt = new Forms.rptDeliveryOrderForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_DELIVERY_ORDER);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesQuotationForm(int id)
        {
            ReportDocument rpt = new Forms.rptSalesQuotationForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesQuotationForm(string code)
        {
            ReportDocument rpt = new Forms.rptSalesQuotationForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_SALES_QUOTATION);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesPaymentForm(string code)
        {
            ReportDocument rpt = new Forms.rptSalesPaymentForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_SALES_PAYMENT);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesInvoiceForm(string code)
        {
            ReportDocument rpt = new Forms.rptSalesInvoiceForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_SALES_INVOICE);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadPurchaseOrderForm(int id)
        {
            ReportDocument rpt = new Forms.rptPurchaseOrderForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadPurchaseOrderForm(string code)
        {
            ReportDocument rpt = new Forms.rptPurchaseOrderForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_PURCHASE_ORDER);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadPurchasePaymentForm(string code)
        {
            ReportDocument rpt = new Forms.rptPurchasePaymentForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_PURCHASE_PAYMENT);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadPurchaseInvoiceForm(string code)
        {
            ReportDocument rpt = new Forms.rptPurchaseInvoiceForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_PURCHASE_INVOICE);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadReceivingReportForm(int id)
        {
            ReportDocument rpt = new Forms.rptReceivingReportForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadReceivingReportForm(string code)
        {
            ReportDocument rpt = new Forms.rptReceivingReportForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_RECEIVING_REPORT);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadInventoryAdjustmentForm(int id)
        {
            ReportDocument rpt = new Forms.rptInventoryAdjustmentForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }
        
        public static ReportDocument LoadInventoryAdjustmentForm(string code)
        {
            ReportDocument rpt = new Forms.rptInventoryAdjustmentForm();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByOrderNo(ds.DenormalizedOrders, code, TransactionTypes.TX_INVENTORY_ADJUSTMENT);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesByProduct(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesByProduct();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByDate(ds.DenormalizedOrders, TransactionTypes.TX_SALES_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesByCustomer(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesByCustomer();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByDate(ds.DenormalizedOrders, TransactionTypes.TX_SALES_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseByProduct(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchaseByProduct();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByDate(ds.DenormalizedOrders, TransactionTypes.TX_PURCHASE_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseByVendor(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchaseByVendor();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByDate(ds.DenormalizedOrders, TransactionTypes.TX_PURCHASE_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseOutstanding(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprOutstandingOrders();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillNotCompleted(ds.DenormalizedOrders, TransactionTypes.TX_PURCHASE_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesOutstanding(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprBackOrders();
            dsReports ds = new dsReports();

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillNotCompleted(ds.DenormalizedOrders, TransactionTypes.TX_SALES_ORDER, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadInventoryStatus()
        {
            ReportDocument rpt = new Inventory.rptInventoryStatus();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            InventoryStatusTableAdapter ta = new InventoryStatusTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillDenormalized(ds.InventoryStatus);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadInventoryMutation(int id)
        {
            ReportDocument rpt = new Inventory.rprInventoryMutation();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillByItemID(ds.DenormalizedOrders, id);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadSalesOrderList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesOrdersList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesOrders(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesQuotationList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesQuotationList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesQuotations(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesInvoiceList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesInvoiceList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesInvoice(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesInvoiceOutstanding(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesInvoiceOutstanding();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesInvoice(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesPaymentList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesPaymentList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesPayment(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadSalesPaymentByCustomer(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Sales.rprSalesPaymentByCustomer();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillSalesPayment(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseOrderList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchaseOrderList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillPurchaseOrders(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseInvoiceList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchaseInvoiceList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillPurchaseInvoice(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchaseInvoiceOutstanding(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchaseInvoiceOutstanding();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillPurchaseInvoice(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchasePaymentList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchasePaymentList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillPurchasePayment(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadPurchasePaymentByVendor(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Purchasing.rprPurchasePaymentByVendor();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillPurchasePayment(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadDeliveryOrderList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Inventory.rprDeliveryOrdersList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillDeliveryOrders(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadReceivingReportList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Inventory.rprReceivingReportList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillReceivingReports(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadInventoryAdjustmentList(DateTime date1, DateTime date2)
        {
            ReportDocument rpt = new Inventory.rprInventoryAdjustmentList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            DenormalizedOrdersTableAdapter ta = new DenormalizedOrdersTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillInventoryAdjustments(ds.DenormalizedOrders, date1, date2);

            if (ds.DenormalizedOrders.Rows.Count <= 0)
                FillNoData(ds.DenormalizedOrders);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            rpt.ParameterFields["@Date1"].CurrentValues.AddValue(date1);
            rpt.ParameterFields["@Date2"].CurrentValues.AddValue(date2);
            return rpt;
        }

        public static ReportDocument LoadCustomerList()
        {
            ReportDocument rpt = new Master.rptCustomerList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            CompaniesTableAdapter ta = new CompaniesTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillCustomer(ds.Companies);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadVendorList()
        {
            ReportDocument rpt = new Master.rptVendorList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            CompaniesTableAdapter ta = new CompaniesTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.FillVendor(ds.Companies);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadCurrencyList()
        {
            ReportDocument rpt = new Master.rptCurrencyList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            CurrenciesTableAdapter ta = new CurrenciesTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.Fill(ds.Currencies);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadWarehouseList()
        {
            ReportDocument rpt = new Master.rptWarehouseList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            WarehousesTableAdapter ta = new WarehousesTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.Fill(ds.Warehouses);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadUnitMeasureList()
        {
            ReportDocument rpt = new Master.rptUnitMeasureList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            UnitMeasuresTableAdapter ta = new UnitMeasuresTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.Fill(ds.UnitMeasures);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadItemCategoryList()
        {
            ReportDocument rpt = new Master.rptItemCategoryList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            ItemCategoriesTableAdapter ta = new ItemCategoriesTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.Fill(ds.ItemCategories);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

        public static ReportDocument LoadItemList()
        {
            ReportDocument rpt = new Master.rptItemList();
            dsReports ds = new dsReports();
            ds.EnforceConstraints = false;

            ItemsTableAdapter ta = new ItemsTableAdapter();
            ta.ClearBeforeFill = true;
            ta.Connection = AppHelper.GetDbConnection();
            ta.Fill(ds.Items);

            RetrieveDeveloper(ds.Developer);
            RetrieveOwner(ds.Owner);
            rpt.SetDataSource(ds);
            return rpt;
        }

    }
}
